/**
 * File:	include/slp-server/wizards.ycp
 * Package:	Configuration of slp-server
 * Summary:	Wizards definitions
 * Authors:	Zugec Michal <mzugec@suse.cz>
 *
 * $Id$
 */

{

textdomain "slp-server";

import "Sequencer";
import "Wizard";

include "slp-server/complex.ycp";
include "slp-server/dialogs.ycp";


/**
 * Main workflow of the slp-server configuration
 * @return sequence result
 */
any MainSequence() {

    /* FIXME: adapt to your needs */
    map aliases = $[
	"summary"	:   ``( SummaryDialog() ),
	"overview"	:   ``( OverviewDialog() ),
	"expert"	:   ``( ExpertDialog() ),
	"edit_reg"	:   ``( editRegFile() )
    ];

    /* FIXME: adapt to your needs */
    map sequence = $[
	"ws_start" : "overview",
	"summary" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `overview	: "overview",
	    `expert	: "expert"
	],
	"overview" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `edit	: "edit_reg",
	    `expert	: "expert"
	],
	"expert" : $[
            `abort      : `abort,
            `next       : "overview",
	],
	"edit_reg" : $[
	   `abort : `abort,
	   `next  : "overview"
	]
    ];

    any ret = Sequencer::Run(aliases, sequence);

    return ret;
}

/**
 * Whole configuration of slp-server
 * @return sequence result
 */
any SlpServerSequence() {

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of slp-server but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any SlpServerAutoSequence() {

    /* Initialization dialog caption */
    string caption = _("SLP Server Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/* EOF */
}
