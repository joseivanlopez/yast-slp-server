/**
 * File:	include/slp-server/complex.ycp
 * Package:	Configuration of slp-server
 * Summary:	Dialogs definitions
 * Authors:	Zugec Michal <mzugec@suse.cz>
 *
 * $Id: complex.ycp 13891 2004-02-05 15:16:57Z msvec $
 */

{

textdomain "slp-server";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "SlpServer";

include "slp-server/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return SlpServer::Modified();
}

boolean ReallyAbort() {
    return !SlpServer::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // SlpServer::AbortFunction = PollAbort;
    boolean ret = SlpServer::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // SlpServer::AbortFunction = PollAbort;
    boolean ret = SlpServer::Write();
    return ret ? `next : `abort;
}

/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {

    /* SlpServer summary dialog caption */
    string caption = _("SLP Server Configuration");

    /* FIXME */
    list summary = SlpServer::Summary();
    list unconfigured = summary[1]:[];
    string configured = summary[0]:"";

    /* Frame label */
    term contents = Wizard_hw::DetectedContent(_("SLP Server to Configure"),
	    unconfigured, false, configured);

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* overview dialog */
        else if(ret == `edit_button) {
            ret = `overview;
            break;
        }
        /* configure the selected device */
        else if(ret == `configure_button) {
	    // TODO FIXME: check for change of the configuration
            any selected = UI::QueryWidget(`id(`detected_selbox), `CurrentItem);
            if(selected == `other) {
                ret = `other;
            }
            else {
                ret = `configure;
            }
            break;
        }
        else if(ret == `next) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
