/**
 * File:	clients/slp-server.ycp
 * Package:	Configuration of slp-server
 * Summary:	Main file
 * Authors:	Zugec Michal <mzugec@suse.cz>
 *
 * $Id$
 *
 * Main file for slp-server configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of slp-server</h3>
 */

textdomain "slp-server";

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("SlpServer module started");

import "Progress";
import "Report";
import "Summary";

import "CommandLine";
include "slp-server/wizards.ycp";

map cmdline_description = $[
    "id" 	: "slp-server",
    /* Command line help text for the Xslp-server module */
    "help"	: _("Configuration of an SLP server"),
    "guihandler"        : SlpServerSequence,
    "initialize"        : SlpServer::Read,
    "finish"            : SlpServer::Write,
    "actions"           : $[
	// FIXME TODO: fill the functionality description here
    ],
    "options"		: $[
	// FIXME TODO: fill the option descriptions here
    ],
    "mappings"		: $[
	// FIXME TODO: fill the mappings of actions and options here
    ]
];

/* is this proposal or not? */
boolean propose = false;
list args = WFM::Args();
if(size(args) > 0) {
    if(is(WFM::Args(0), path) && WFM::Args(0) == .propose) {
        y2milestone("Using PROPOSE mode");
        propose = true;
    }
}

/* main ui function */
any ret = nil;

if(propose) ret = SlpServerAutoSequence();
else ret = CommandLine::Run(cmdline_description);
y2debug("ret=%1", ret);

/* Finish */
y2milestone("SlpServer module finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
